ldr r1, 1                                   // r1 = s_eeeee_MM.1 //[num1_high]
ldr r3, 3                                   // r3 = s_eeeee_MM.2 //[num2_high]
addi r0, 7                                  // r0 = 0000_0111
shift left no r0                            // r0 = 0000_1110
shift left no r0                            // r0 = 0001_1100
addi r0, 3                                  // r0 = 0001_1111
shift left no r0                            // r0 = 0011_1110
shift left no r0                            // r0 = 0111_1100
mov2 r0, r7                                 // r7 = 0111_1100 // store exp mask
and r1, r7                                  // r0 = 0eee_ee00.1 // exp1
mov2 r0, r2                                 // r2 = 0eee_ee00.1 // store exp1
and r3, r2                                  // r0 = 0eee_ee00.2 // exp2
mov2 r0, r4                                 // r4 = 0eee_ee00.2 // store exp2
cmp r2, r4                                  // if (r2 < r4) {
bge NOSWAP                                  // //perform swap of float1 and float2
str r1, 3                                   // store [num2_high]
str r3, 1                                   // store [num1_high]
ldr r1, 0                                   // r1 =  [num1_low]
ldr r3, 2                                   // r3 =  [num2_low]
str r1, 3                                   // store [num2_low]
str r3, 0                                   // store [num1_low] }
NOSWAP: ldr r1, 1                           // r1 = seee_eeMM.1 //[num1_high] 
and r1, r7                                  // r0 = 0eee_ee00.1
shift right no r0                           // r0 = 00ee_eee0.1
shift right no r0                           // r0 = 000e_eeee.1
mov2 r0, r4                                 // r4 = 000e_eeee.1 // store exp1
ldr r3, 3                                   // r3 = seee_eeMM.2 //[num2_high]
and r3, r7                                  // r0 = 0eee_ee00.2
shift right no r0                           // r0 = 00ee_eee0.2
shift right no r0                           // r0 = 000e_eeee.2
mov2 r0, r2                                 // r2 = 000e_eeee.2 // store exp2
addi r0, 3                                  // r0 = 0000_0011
and r0, r3                                  // r0 = 0000_00MM.2
mov2 r0, r7                                 // r7 = 0000_0011 // store man_high_mask
and r3, r7                                  // r0 = 0000_00MM.2
mov2 r0, r5                                 // r5 = 0000_00MM.2 // store man_high2
and r0, r6                                  // r0 = 0 // clear accumulator using empty r6
addi r0, 4                                  // r0 = 0000_0100
add r0, r5                                  // r0 = 0000_01MM.2
mov2 r0, r5                                 // r5 = 0000_01MM.2 // store decimal: 1.man_high2
ldr r0, 2                                   // r0 = mmmm_mmmm.2 //[num2_low]
mov2 r0, r6                                 // r6 = mmmm_mmmm.2 // store man_low2
WHILE: cmp r2, r4                           // while (r2 < r4) {
bge AFTERWHILE                              // align smaller fp: exp2++ and mantissa2 >> 1
addi r2, 1                                  // r0 = 000e_eeee.2 + 1
mov2 r0, r2                                 // r2 = 000e_eeee.2 + 1 // put exp2 back to its reg
shift right no r5                           // r5 = 0000_001M.2
shift right carry r6                        // r6 = Mmmm_mmmm.2 }
branch WHILE                                // loop back to comparision
AFTERWHILE: and r1, r7                      // r0 = 0000_00MM.1 // get man_high1
mov3 r0, r7                                 // r0 = 0000_0011
addi r0, 1                                  // r0 = 0000_0100
add r0, r7                                  // r0 = 0000_01MM.1
mov2 r0, r7                                 // r7 = 0000_01MM.1 // store decimal 1.man_high
ldr r3, 0                                   // r3 = mmmm_mmmm.1 // load num1_low
add r3, r6                                  // r0 = man_low1 + man_low2 // to get c_out for man_high
add r2, r7                                  // r0 = man_high2 + man_high1 + c_in
mov2 r0, r2                                 // r2 = man_high
add r3, r6                                  // r0 = man_low1 + man_low2
mov2 r0, r3                                 // r3 = man_low
shift right no r5                           // r5 = r5 >> 1 // clear r5 for checking mantissa
shift right no r5                           // r5 = r5 >> 1
shift right no r5                           // r5 = r5 >> 1
mov3 r0, r5                                 // r0 = 0000_0000
addi r0, 4                                  // r0 = 0000_0100
addi r0, 4                                  // r0 = 0000_1000
mov2 r0, r6                                 // r6 = 0000_1000 // for checking mantissa
cmp r2, r6                                  // if (man_high > 8) {
ble AFTERNORMALIZE                          // shift mantissa right 1, increment exp
mov3 r0, r4                                 // r0 = exp1
addi r0, 1                                  // r0 = exp1 + 1
shift left no r0                            // r0 = r0 << 1
shift left no r0                            // r0 = r0 << 1
mov2 r0, r4                                 // r4 = 0_eeeee_00
shift right no r2                           // r2 = r2 >> 1
shift right carry r3                        // r3 = r3 >> 1 }
AFTERNORMALIZE: str r3, 4                   // store lower float into memory
mov3 r0, r6                                 // r0 = 0000_1000
add r0, r6                                  // r0 = 0001_0000
add r0, r6                                  // r0 = 0010_0000
add r0, r6                                  // r0 = 0100_0000
add r0, r6                                  // r0 = 1000_0000
and r0, r1                                  // r0 = s000_0000
or r0, r4                                   // r0 = s_eeeee_00
or r0, r2                                   // r0 = s_eeeee_MM
str r0, 5                                   // store upper float into memory
halt                                        // end program